{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ADMIN/Desktop/Little_Next/little_backend/src/app/utils/config/db.js"],"sourcesContent":["const { default: mongoose } = require(\"mongoose\")\r\n\r\n\r\nconst DBConnection = async()=>{\r\n    try {\r\n        await mongoose.connect(process.env.MONGO_URI);\r\n        console.log(\"Database Connected\")\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport default DBConnection"],"names":[],"mappings":";;;AAAA,MAAM,EAAE,SAAS,QAAQ,EAAE;AAG3B,MAAM,eAAe;IACjB,IAAI;QACA,MAAM,SAAS,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QAC5C,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;IAChB;AACJ;uCAEe"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ADMIN/Desktop/Little_Next/little_backend/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from 'next-auth';\r\nimport CredentialsProvider from 'next-auth/providers/credentials';\r\nimport DBConnection from '@/app/utils/config/db';\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'Credentials',\r\n      async authorize(credentials) {\r\n        // Ensure database is connected\r\n        await DBConnection();\r\n\r\n        // Check if the credentials match the admin credentials\r\n        if (credentials?.name === 'admin' && credentials?.password === 'admin1234') {\r\n          return { name: 'admin',  role: 'admin' };\r\n        }\r\n\r\n        // Return null if credentials are invalid\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  secret: process.env.SECRET_KEY,\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      session.user = token.user;\r\n      return session;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.user = user;\r\n      }\r\n      return token;\r\n    },\r\n  },\r\n});\r\n\r\n// Use the handler for both GET and POST requests in the API route\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,MAAM,WAAU,WAAW;gBACzB,+BAA+B;gBAC/B,MAAM,CAAA,GAAA,qIAAA,CAAA,UAAY,AAAD;gBAEjB,uDAAuD;gBACvD,IAAI,aAAa,SAAS,WAAW,aAAa,aAAa,aAAa;oBAC1E,OAAO;wBAAE,MAAM;wBAAU,MAAM;oBAAQ;gBACzC;gBAEA,yCAAyC;gBACzC,OAAO;YACT;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,UAAU;IAC9B,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,GAAG,MAAM,IAAI;YACzB,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG;YACf;YACA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}